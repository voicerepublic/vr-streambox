#!/usr/bin/liquidsoap -v

set("log.file.path", "./liquidsoap.log")
# set("log.stdout", true)

# ------------------------------ SETTINGS

callback_url = '<%= callback_url %>'
alsa_device = '<%= device || "hw:1,0" %>'
icecast_host = '<%= public_ip_address %>'
icecast_port = <%= port || 80 %>
icecast_mount = '<%= mount_point || "/live" %>'
icecast_password = '<%= source_password %>'

# ------------------------------ INITIAL CALLBACK

ignore(http.post(callback_url ^ "/liquidsoap_startup"))

def liquidsoap_shutdown()
  ignore(http.post(callback_url ^ "/liquidsoap_shutdown"))
end

on_shutdown(liquidsoap_shutdown)

# ------------------------------ CALLBACKS

def icecast_connect()
  ignore(http.post(callback_url ^ "/icecast_connect"))
end

def icecast_disconnect()
  ignore(http.post(callback_url ^ "/icecast_disconnect"))
end

def icecast_error(error)
  ignore(http.post(callback_url ^ "/icecast_error"))
  3. # try again after 3 seconds
end

def icecast_start()
  ignore(http.post(callback_url ^ "/icecast_start"))
end

def icecast_stop()
  ignore(http.post(callback_url ^ "/icecast_stop"))
end

def file_start()
  ignore(http.post(callback_url ^ "/file_start"))
end

def file_stop()
  # could this upload the file to s3?
  ignore(http.post(callback_url ^ "/file-stop"))
end

def file_close(filename)
  # could this upload the file to s3?
  ignore(http.post(callback_url ^ "/file_close"))
end

# ------------------------------ INPUT

interlude = single("./streambox/loop1.wav")
#stream = input.alsa(bufferize=false, device='hw:1,0')
stream = input.alsa(device=alsa_device)

# ------------------------------ PROCESSING

stream = mic_filter(stream)
stream = nrj(stream)
stream = clip(stream)

enhanced = strip_blank(stream, max_blank=10.)
stream = fallback(track_sensitive=false, [enhanced, interlude])

# ------------------------------ OUTPUT

output.alsa(enhanced) # local monitoring

output.file(
  %vorbis,
  "./recordings/rec_%Y%m%d_%H%M%S.ogg",
  on_start=file_start,
  on_stop=file_stop,
  on_close=file_close,
  reopen_when={0m0s}, # rotate on the full hour
  fallible=true,
  enhanced
)

if icecast_host != '' then
  ignore(output.icecast(
    %vorbis(channels=1), # mono
    host=icecast_host,
    port=icecast_port,
    mount=icecast_mount,
    password=icecast_password,
    public=false,
    on_connect=icecast_connect,
    on_disconnect=icecast_disconnect,
    on_error=icecast_error,
    on_start=icecast_start,
    on_stop=icecast_stop,
    mean(stream) # mono
  ))
end

# ------------------------------ LIQUIDSOAP RELOAD

# We call it with
#
#   liquidsoap streamboxx.liq
#
# so the first argument will be the file to watch.
main_file = argv(0)

def restart_if_valid()
  if test_process("liquidsoap -c #{main_file}") then
    restart()
  else
    log("Error parsing #{main_file}")
    system("liquidsoap -c #{main_file}")
  end
end

ignore(file.watch(main_file, restart_if_valid))
